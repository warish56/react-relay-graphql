

   type Gener {
       id: ID
       name: String
   }

   type Votes{
       likes: Int
       dislikes: Int
   }


    type Movie{
        id: ID
        name: String
        poster: String
        release: String
        rating: Float
        time: String
        votes: Votes
        generIds: [String]
        gener: [Gener]
        popularity: Int
        description: String
    }

    type PageInfo{
        startCursor:String
        endCursor: String
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
    }



    type MovieEdge{
        cursor: String
        node: Movie
    }


    type MoviePage{
        totalCount: Int
        edges: [MovieEdge]!
        pageInfo: PageInfo
        
    }

    type MoviesResult{
        data(first: Int!, after: String): MoviePage
    }


    enum Status {
        ACTIVE
        CLOSED
    }

    type Company {
        id: ID
        name: String
        location: String
        users: [User]

    }

    type User{
        id: ID
        name: String
        age: Int
        address: String
        status: Status
        comapny: Company
    }

    type Query{
        User(id: ID): User
        Company(id:ID): Company
        Movie(id: ID): Movie
        Movies:MoviesResult
    }

    type Mutation{
        likeMovie(movieId: ID!): Movie
        disLikeMovie(movieId: ID!): Movie
    }

    type schema{
        query: Query
        mutation: Mutation
    }